# NOTE NOTE NOTE
# All addresses here are _byte_ addresses.
# In LWDO-SDR design, Wishbone addresses are _word_ addresses.

register_blocks:
  - name: lwdo_regs # this is the name of generated verilog module
    byte_size: 1024

    register_files:
    # ------------------------------------------------------
    #                 SYS - system control
    # ------------------------------------------------------
    - name: sys
      offset_address: 0x0000

      registers:
      - name: magic
        comment: "Read-only magic value"
        bit_fields:
        - bit_assignment: { width: 32 }
          type: rof
          initial_value: 0x4544574C # 'LWDO'

      - name: version
        comment: "Register file version"
        bit_fields:
        - name: major
          bit_assignment: { width: 16 }
          type: rof
          # NOTE!
          # THIS VALUE MUST BE INCREMENTED EVERY TIME
          # REGISTERS MAP IS CHANGED IN NON-BACKWARDS-COMPATIBLE MANNER
          initial_value: 1

        - name: minor
          bit_assignment: { width: 16 }
          type: rof
          # NOTE
          # This value may be incremented whenever register file is extended
          # in backwards-compatible manner. Reset to 0 when `major` increments.
          initial_value: 1

      - name: con
        comment: "System-level control bits"
        bit_fields:
        - name: sys_rst
          comment: "write 1 to perform complete system reset"
          bit_assignment: { width: 1 }
          type: w1
          initial_value: 0

      - name: pll
        comment: "Read-only PLL configuration bits (for host to compute sys_clk)"
        bit_fields:
        - name: divr
          bit_assignment: { width: 4 }
          type: rof
          initial_value: { default: 0 }
        - name: divf
          bit_assignment: { width: 7 }
          type: rof
          initial_value: { default: 0 }
        - name: divq
          bit_assignment: { width: 3 }
          type: rof
          initial_value: { default: 0 }

    # ------------------------------------------------------
    #           HWTIME - hardware time counter
    # ------------------------------------------------------
    - name: hwtime
      offset_address: 0x0020
      comment: "HWTIME counter"

      registers:
      - name: cnt
        comment: "HWTIME counter value"
        bit_fields:
        - bit_assignment: { width: 32 }
          type: ro

    # ------------------------------------------------------
    #           TDC - Time-to-Digital converter
    # ------------------------------------------------------
    - name: tdc
      offset_address: 0x0040

      registers:
      - name: con
        comment: "TDC control"

        bit_fields:
        - name: en
          comment: "Enable TDC"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: clk_meas_fast
          comment: "Set this when clk_meas is fast (more than ~1 kHz)"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: gate_fdec
          comment: "Set this to decrease the frequency of divided clk_gate (increases clk_gate divider)"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: gate_finc
          comment: "Set this to increase the frequency of divided clk_gate (decreases clk_gate divider)"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

      - name: pll
        comment: "Read-only PLL configuration bits (for host to compute tdc_clk)"
        bit_fields:
        - name: divr
          bit_assignment: { width: 4 }
          type: rof
          initial_value: { default: 0 }
        - name: divf
          bit_assignment: { width: 7 }
          type: rof
          initial_value: { default: 0 }
        - name: divq
          bit_assignment: { width: 3 }
          type: rof
          initial_value: { default: 0 }
        - name: ss_divfspan
          bit_assignment: { width: 7 }
          type: rof
          initial_value: { default: 0 }

      - name: div_gate
        comment: "Divider for clk_gate"
        bit_fields:
        - bit_assignment: { width: 32 }
          type: rof
          initial_value: { default: 0 }

      - name: div_meas_fast
        comment: "Fast clk_meas divider (applied only when clk_meas_fast is set)"
        bit_fields:
        - bit_assignment: { width: 32 }
          type: rof
          initial_value: { default: 0 }

    # ------------------------------------------------------
    #   ADC - analog-to-digital converter control
    # ------------------------------------------------------
    - name: adc
      offset_address: 0x0060
      comment: "ADC control"

      registers:
      - name: con
        comment: "ADC control"
        bit_fields:
        - name: adc_en
          comment: "Enable ADC channels 1-4"
          bit_assignment: { width: 4 }
          type: rw
          initial_value: 0
      
      - name: sample_rate_div
        comment: "ADC sample rate divider"
        bit_field:
        - bit_assignment: { width: 24 }
          type: rw
          initial_value: 0xFFFFFF

      - name: ts_rate_div
        comment: "Timestamping rate divider"
        bit_field:
        - bit_assignment: { width: 8 }
          type: rw
          initial_value: 0xFF

    # ------------------------------------------------------
    #   FTUN - frequency oscillator tuning
    # ------------------------------------------------------
    - name: ftun
      offset_address: 0x0080
      comment: "Frequency oscillator tuning"

      registers:
      - name: vtune_set
        comment: "VCTCXO DAC control (linear scale, higher value -> higher frequency)"

        bit_fields:
        - name: dac_low
          comment: "VCTCXO DAC setting (low bits)"
          bit_assignment: { lsb: 0, width: 8 }
          type: rw
          initial_value: 0x00
        - name: dac_high
          comment: "VCTCXO DAC setting (high bits)"
          bit_assignment: { lsb: 8, width: 16 }
          type: rwtrg
          initial_value: 0x8000

    # # ------------------------------------------------------
    # #     ADCT - analog-to-digital converter timing
    # # ------------------------------------------------------
    # - name: adct
    #   offset_address: 0x40
    #   comment: "ADC timing circuitry controls"

    #   registers:
    #   - name: con
    #     comment: "Common enable/disable bits"

    #     bit_fields:
    #     - name: srate1_en
    #       comment: "Enable sample rate generator 1"
    #       bit_assignment: { width: 1 }
    #       type: rw
    #       initial_value: 0

    #     - name: srate2_en
    #       comment: "Enable sample rate generator 2"
    #       bit_assignment: { width: 1 }
    #       type: rw
    #       initial_value: 0

    #     - name: puls1_en
    #       comment: "Enable pulse generator 1"
    #       bit_assignment: { width: 1 }
    #       type: rw
    #       initial_value: 0

    #     - name: puls2_en
    #       comment: "Enable pulse generator 2"
    #       bit_assignment: { width: 1 }
    #       type: rw
    #       initial_value: 0

    #   - name: srate1_psc_div
    #     comment: "Sample rate generator 1 prescaler division factor"
    #     bit_fields:
    #     - name: val
    #       comment: "Clock frequency division factor for sample rate generator 1. fSRATE1=fSYSCLK/(val+1)"
    #       bit_assignment: { width: 8 }
    #       type: rw
    #       initial_value: 199

    #   - name: srate2_psc_div
    #     comment: "Sample rate generator 2 prescaler division factor"
    #     bit_fields:
    #     - name: val
    #       comment: "Clock frequency division factor for sample rate generator 2. fSRATE2=fSYSCLK/(val+1)"
    #       bit_assignment: { width: 8 }
    #       type: rw
    #       initial_value: 199

    #   - name: puls1_psc_div
    #     comment: "Pulse generator 1 prescaler division factor"
    #     bit_fields:
    #     - name: val
    #       comment: "Clock frequency division factor for pulse generator 1. fPULS1=fSRATE1/(val+1)"
    #       bit_assignment: { width: 23 }
    #       type: rw
    #       initial_value: 0

    #   - name: puls2_psc_div
    #     comment: "Pulse generator 2 prescaler division factor"
    #     bit_fields:
    #     - name: val
    #       comment: "Clock frequency division factor for pulse generator 2. fPULS2=fSRATE2/(val+1)"
    #       bit_assignment: { width: 23 }
    #       type: rw
    #       initial_value: 0

    #   - name: puls1_dly
    #     comment: "Pulse generator 1 micro-delay control"
    #     bit_fields:
    #     - name: val
    #       comment: "Delay for pulse generator 1 output, number of SYSCLK cycles. Tdelay=(val+1)/fSYSCLK"
    #       bit_assignment: { width: 9 }
    #       type: rw
    #       initial_value: 0

    #   - name: puls2_dly
    #     comment: "Pulse generator 2 micro-delay control"
    #     bit_fields:
    #     - name: val
    #       comment: "Delay for pulse generator 2 output, number of SYSCLK cycles. Tdelay=(val+1)/fSYSCLK"
    #       bit_assignment: { width: 9 }
    #       type: rw
    #       initial_value: 0

    #   - name: puls1_pwidth
    #     comment: "Pulse generator 1 pulse width control"
    #     bit_fields:
    #     - name: val
    #       comment: "Pulse width for pulse generator 1 output, number of SRATE1 cycles. Tpulse=val/fSRATE1"
    #       bit_assignment: { width: 16 }
    #       type: rw
    #       initial_value: 1

    #   - name: puls2_pwidth
    #     comment: "Pulse generator 2 pulse width control"
    #     bit_fields:
    #     - name: val
    #       comment: "Pulse width for pulse generator 2 output, number of SRATE2 cycles. Tpulse=val/fSRATE2"
    #       bit_assignment: { width: 16 }
    #       type: rw
    #       initial_value: 1

    # ------------------------------------------------------
    #   TEST - test registers
    # ------------------------------------------------------
    - name: test
      offset_address: 0x03E0
      comment: "Registers allocated for test purposes"

      registers:
      - name: rw
        bit_fields:
        - name: val
          bit_assignment: { width: 32 }
          type: rw
          initial_value: 0xAAA5555B
